1. 
require 'spec_helper'
describe "messages/show.html.erb" do
  it "displays the text attribute of the message" do
    render
    rendered.should contain("Hello world!")
  end
end

2. rails_views/messages/03/app/views/messages/show.html.erb
  <%= @message.text %>

3. describe "messages/show.html.erb" do
  it "displays the text attribute of the message" do
    assign(:message, double("Message", :text => "Hello world!"))
    render
    rendered.should contain("Hello world!")
  end
end

4. rails_views/messages/05/spec/views/messages/new.html.erb_spec.rb
require 'spec_helper'
describe "messages/new.html.erb" do
  it "renders a form to create a message" do
    assign(:message, double("Message"))
    render
    rendered.should have_selector("form",
      :method => "post",
      :action => messages_path
    ) do |form|
      form.should have_selector("input", :type => "submit")
    end
  end
end

5. rails_views/messages/03/app/views/messages/show.html.erb
 <%= form_for @message do |f| %>
  <%= f.submit "Save" %>
<% end %>

6.  rails_views/messages/05/spec/views/messages/new.html.erb_spec.rb
require 'spec_helper'
describe "messages/new.html.erb" do
  it "renders a form to create a message" do
    assign(:message, double("Message"))
    render
    rendered.should have_selector("form",
      :method => "post",
      :action => messages_path
    ) do |form|
      form.should have_selector("input", :type => "submit")
    end
  end
end

7.  rails_views/messages/06/spec/views/messages/new.html.erb_spec.rb
it "renders a form to create a message" do
  assign(:message, mock_model("Message"))
  render
  rendered.should have_selector("form",
    :method => "post",
    :action => messages_path
  ) do |form|
    form.should have_selector("input", :type => "submit")
  end
end

8.  rails_views/messages/07/spec/views/messages/new.html.erb_spec.rb
it "renders a form to create a message" do
  assign(:message, mock_model("Message").as_new_record)
  render
  rendered.should have_selector("form",
    :method => "post",
    :action => messages_path
  ) do |form|
    form.should have_selector("input", :type => "submit")
  end
end

9. rails_views/messages/08/config/routes.rb
Messages::Application.routes.draw do
  resources :messages
end

10. rails_views/messages/09/spec/views/messages/new.html.erb_spec.rb
it "renders a text field for the message title" do
  assign(
    :message,
    mock_model("Message", :title => "the title").as_new_record
  )
  render
  rendered.should have_selector("form") do |form|
    form.should have_selector("input",
      :type => "text",
      :name => "message[title]",
      :value => "the title"
    )
  end
end

11. rails_views/messages/10/app/views/messages/new.html.erb
<%= form_for @message do |f| %>
  <%= f.text_field :title %>
  <%= f.submit "Save" %>
<% end %>

12.  rails_views/messages/11/spec/views/messages/new.html.erb_spec.rb
it "renders a form to create a message" do
  assign(
    :message,
    mock_model("Message").as_new_record.as_null_object
  )
  render
  rendered.should have_selector("form",
    :method => "post",
    :action => messages_path
  ) do |form|
    form.should have_selector("input", :type => "submit")
  end
end

13. rails_views/messages/12/spec/views/messages/new.html.erb_spec.rb
require 'spec_helper'
describe "messages/new.html.erb" do
  let(:message) do
    mock_model("Message").as_new_record.as_null_object
  end
  before do
    assign(:message, message)
  end
  it "renders a form to create a message" do
    render
    rendered.should have_selector("form",
      :method => "post",
      :action => messages_path
    ) do |form|
      form.should have_selector("input", :type => "submit")
    end
  end
  it "renders a text field for the message title" do
    message.stub(:title => "the title")
    render
    rendered.should have_selector("form") do |form|
      form.should have_selector("input",
        :type => "text",
        :name => "message[title]",
        :value => "the title"
      )
    end
  end
end

14.  rails_views/messages/13/spec/views/messages/new.html.erb_spec.rb
it "renders a text area for the message text" do
  message.stub(:text => "the message")
  render
  rendered.should have_selector("form") do |form|
    form.should have_selector("textarea",
      :name => "message[text]",
      :content => "the message"
    )
  end
end
